disc.joint2(0:5,choose(5,0:5)
)
S = rolldie2(2)
X = apply(S,1,max)
Y = apply(S,1,min)
disc.joint2(X,Y)
disc.joint2(X,Y,plot=T)
S = rolldie2(3)
X = apply(S,1,max)
Y = apply(S,1,min)
disc.joint2(X,Y)
urnsample2(c(A,B),3,ordered=T)
urnsample2(2,3,ordered=T)
disc.cdf(X,Y)
disc.cdf(X\,Y)
x = c("w","w","w","w","b","b","b","b","b","b")
urnsample2(x,3)
choose(10,3)
choose(4,3)
choose(4,2)*choose(6,1)
choose(6,2)*choose(4,1)
choose(6,1)
6*4*8
hat = c("w","w","w","w","b","b","b","b","b","b")
urnsample(hat,3)
library(Rstat)
urnsample2(hat,3)
S=urnsample2(hat,3)
A = apply(S,1,sum(V1==b&V2==b))
A = apply(S,1,sum(v1==b&v2==b))
urnsample2(hat,3,ordered=T)
hat
S = urnsamples(hat,3,ordered=T)
?urnsamples
??urnsamples
library(prob)
S = urnsamples(hat,3,ordered=T)
str(S)
A = S[-3]
A
str(S)
str(A)
B = S[-1]
A = apply(A,1,function(x) sum(x=='B'))
table(A)
str(A)
str(A)
str(B)
N = S[,-1]
str(N)
A = S[-3]
A = apply(A,1,function(x) sum(x=="B"))
table(A)
str(S)
countB = function(x) sum(x=="b")
A = S[-3]
A = apply(A,1,counB)
A = apply(A,1,countB)
table(A)
B = apply(B,1,countB)
disc.exp(0:2,table(A))
table(A,B)
S = tosscoin(3)
S
24+72+72+192+120+120+120
864/720
umb = c("A","B","C","D","E","F","G","H")
S = urnsamples(umb,8,ordered=T)
A =apply(S,1,function(x)sum(x==umb))
table(A)
disc.exp(0:8,table(A))
0:8
table(A)
A
nrow(S)
disc.exp(c(0,1,2,3,4,5,6,8),table(A))
S = tosscoin(s)
S = tosscoin(4)
S
A = apply(S,1,function(x) sum(x=="H"))
A
B = apply(S,1,function(x) sum(x=="T"))
table(A)
table(B)
disc.exp(0:4,table(A))
disc.exp(0:4,table(B))
V = A-B
table(V)
W = abs(V)
table(W)
disc.exp(c(-4,-2,0,2,4),table(V))
txy = table(A,B)
disc.jexp(txy)
disc.jexp(txy,prt"cov")
disc.jexp(txy,prt="cov")
X = c("b","b","b","r","r","r","r","r","r","r")
S = urnsamples(X,3,ordered=T)
BB = function(x) sum(x=="b")==3
A = apply(S,1,BB)
table(A)
nrow(S)
data = CO2
str(data)
data
tapply(data$uptake,data$type,mean)
str(data$uptake)
str(data$Type)
as.character(data$Type)
b=as.character(data$Type)
tapply(data$uptake,b,mean)
tapply(data$uptake,as.character(data$Treatment),mean)
aggregate(data$uptake, by=)
aggregate(data$uptake, by=list(data$Type,data$Treatment), FUN=mean)
data
apply(data$uptake,1,)
apply(data$uptake,1,x)
apply(data$uptake,1,function(x)x>=20.0)
apply(data$uptake,1,function(x) x>=20)
data[data$uptake>=20,]
data[data$uptake>=20,]$Treatment == "chilled"
sum(data[data$uptake>=20,]$Treatment == "chilled")
nrow(data[data$uptake>=20,])
data[data$uptake>=20,]$Type=="Mississippi"
data[data[data$uptake>=20,]$Type=="Mississippi",]
data[data[data$uptake>=20,]$Type=="Mississippi",]$Treatment=="chilled"
sum(data[data[data$uptake>=20,]$Type=="Mississippi",]$Treatment=="chilled")
sum(data[data[data$uptake>=20,]$Type=="Mississippi",])
data[data[data$uptake>=20,]$Type=="Mississippi",]
nrow(data[data[data$uptake>=20,]$Type=="Mississippi",])
data[data$uptake>=20,]
data[data$uptake>=20,]$Type == "Mississippi"
data[data[data$uptake>=20,]$Type == "Mississippi",]
rownames(data[data$uptake>=20,]$Type == "Mississippi")
data[data[data$uptake>=20,]$Type == "Mississippi"]
data[data$uptake>=20 & data$Type=="Mississippi",]
data[data$uptake>=20 & data$Type=="Mississippi",]$Treatment=="chilled"
sum(data[data$uptake>=20 & data$Type=="Mississippi",]$Treatment=="chilled")
nrow(data[data$uptake>=20 & data$Type=="Mississippi",]$Treatment=="chilled")
nrow(data[data$uptake>=20 & data$Type=="Mississippi",])
X = c(0.5,0.4,0.1)
Y=c(0.01,0.02,0.03)
B = X*Y
B
B/sum(B)
M=B/sum(B)
choose(100,15)*0.3^15*0.7^85
choose(100,15)*(0.3)^15*(0.7)^85
2^3
library(Rstat)
data("exa2_3")
exa2_3
str(exa2_3)
S = rolldie2(2)
S2 = subset(S, X1>=X2)
A = subset(S2, (X2+X1)%%2==0)
A
A = subset(S2, apply(S2,1,function(x) sum(x)%%2==0)
)
A
library(Rstat)
library(prob)
data = exa2_2
str(Data)
str(data)
aggregate(data$GPA, by=list(data$성별,data$참여활동), FUN=mean)
data[data$GPA>=3.5,]
data[data$GPA>=3.5 & data$성별=="여",]
nrow(data[data$GPA>=3.5 & data$성별=="여",])
nrow(data[data$GPA>=3.5,])
nrow(data[data$GPA>=3.5 & data$입학전형=="정시일반",])
data[data$GPA>=3.5 & data$입학전형=="정시일반",]
data[data$GPA>=3.5 & data$입학전형=="정시일반" & data$성별=="여",]
nrow(data[data$GPA>=3.5 & data$입학전형=="정시일반",])
nrow(data[data$GPA>=3.5 & data$입학전형=="정시일반" & data$성별=="여",])
x = c("b","b","b","r","r","r","r","r","r","r","y","y","y","y","y","y")
S = urnsamples(x,4,ordered = T)
nrow(S)
7*6*6*5
check = function(x) sum(x=="r")==2 & sum(x=="y")==2
apply(S,1,check)
S[apply(S,1,check),]
A=apply(S,1,check)
str(A)
A ==TRUE
check = function(x) sum(x=="r")==2 & sum(x=="y")==2
A %in% TRUE
A=apply(S,1,check)
A
nrow(S
)
16*15*14*13
7*6*6*5
1260/43680
3*7*6*6
756/43680
S=urnsamples(c(1,3,5,7,9,11),3)
nrow(S)
choose(6,3)
A = apply(S,1,max)
A
table(A
)
B = apply(S,1,min)
txy = table(A,B)
disc.jexp(txy,prt ="cov" )
A-B
C=A-B
c>2
C=A-B>2
C
B
table(C)
S
A
B
S = urnsamples()
x
x
S = urnsamples(x,4)
check = function(x) sum(x=="r")==2
apply(S,1,check)
A=apply(S,1,check)
A
check = function(x) sum(x=="r")==2 & sum(x=="y")==2
A=apply(S,1,check)
table(A)
nrow(S)
rep("b",3)
315/1820
check = function(x) sum(x=="r")==2 & sum(x=="y")==1 & sum(x=="b")==1
A=apply(S,1,check)
table(A)
378/1820
S
S[S$X1=="r" & S$X2=="r",]
S1=S[S$X1=="r" & S$X2=="r",]
S2=S1[S1$X3=="r & S1$X4=="r",]
S2=S1[S1$X3=="r" & S1$X4=="r",]
nrow(S2)
35/1820
X = -exp(-x-y)
X = -exp(-x)
X = -exp(^-x)
setwd("C:\Users\seook\Documents\21-1데이터분석및활용(R)")
setwd("C:/Users/seook/Documents/21-1데이터분석및활용(R)")
records = read.csv("./data/FlightRecords.csv")
records=records[records$deptime>600 & records$deptime < 2300, ]
records$deptime=as.factor(floor(records$deptime/100))
records$dayweek = as.factor(records$dayweek)
records$weather = as.factor(records$weather)
records$delay = factor(records$delay, level=c("ontime","delayed"), labels=c("ontime","delayed"))
library(ggplot2)
ggplot(records, aes(x=dayweek, fill=delay))+ geom_bar(position="fill")
ggplot(records, aes(x=dayweek, fill=delay))+ geom_bar(position="fill")+labs(y="proportion")+scale_fill_brewer(palette="set2")
ggplot(records, aes(x=dayweek, fill=delay))+ geom_bar(position="fill")+labs(y="proportion")+scale_fill_brewer(palette="Set2")
ggplot(records, aes(x=dayweek, fill=delay))+ geom_bar(position="fill")+labs(y="proportion")+scale_fill_brewer(palette="Set2")+theme_minial()
ggplot(records, aes(x=dayweek, fill=delay))+ geom_bar(position="fill")+labs(y="proportion")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"), fill=delay))+ geom_bar(position="fill")+sclae_y_continuous(breaks=seq(0,1,.2),label=percent)+labs(y="percent",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+sclae_y_continuous(breaks=seq(0,1,.2),label=percent)+labs(y="percent",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+scale_y_continuous(breaks=seq(0,1,.2),label=percent)+labs(y="percent",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+scale_y_continuous(breaks=seq(0,1, .2),label=percent)+labs(y="percent",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(y="percent",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="percent",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()+scale_y_continuous(breaks=seq(0,1, .2))
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()+scale_y_continuous(breaks=seq(0,1, .2))
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()+scale_y_continuous(breaks=seq(0,1, .2),label=percent)
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
str(records)
ggplot(records, aes(x=factor(deptime,levels=c(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22),labels=c("6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시")), fill=delay))+ geom_bar(position="fill")+labs(x="Deptime",y="proportion",title="delay by Deptime")+scale_fill_brewer(palette="Set2")+theme_minimal()
records[records$deptime==22]
records[records$deptime==22,]
records[records$deptime==22,]
ggplot(records, aes(x=factor(deptime,levels=c(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22),labels=c("6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시")), fill=delay))+ geom_bar(position="fill")+labs(x="Deptime",y="proportion",title="delay by Deptime")+scale_fill_brewer(palette="Set2")+theme_minimal()
str(records)
ggplot(records, aes(x=origin, fill=delay))+ geom_bar(position="fill")+labs(x="Origin",y="proportion",title="delay by Origin")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=origin, fill=delay))+ geom_bar(position="fill")+labs(x="출발공항코드",y="proportion",title="delay by Origin")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=dest, fill=delay))+ geom_bar(position="fill")+labs(x="도착공항코드",y="proportion",title="delay by Dest")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=carrier, fill=delay))+ geom_bar(position="fill")+labs(x="항공사코드",y="proportion",title="delay by Carrier")+scale_fill_brewer(palette="Set2")+theme_minimal()
ggplot(records, aes(x=weather, fill=delay))+ geom_bar(position="fill")+labs(x="날씨",y="proportion",title="delay by Weather")+scale_fill_brewer(palette="Set2")+theme_minimal()
#요일별 연착비율
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
#요일별 연착비율
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
#출발 시간대 별 연착 비율
ggplot(records, aes(x=factor(deptime,levels=c(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22),labels=c("6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시")), fill=delay))+ geom_bar(position="fill")+labs(x="Deptime",y="proportion",title="delay by Deptime")+scale_fill_brewer(palette="Set2")+theme_minimal()
#출발 공항 별 연착비율
ggplot(records, aes(x=origin, fill=delay))+ geom_bar(position="fill")+labs(x="출발공항코드",y="proportion",title="delay by Origin")+scale_fill_brewer(palette="Set2")+theme_minimal()
#도착 공항 별 연착비율
ggplot(records, aes(x=dest, fill=delay))+ geom_bar(position="fill")+labs(x="도착공항코드",y="proportion",title="delay by Dest")+scale_fill_brewer(palette="Set2")+theme_minimal()
#항공사 별 연착비율
ggplot(records, aes(x=carrier, fill=delay))+ geom_bar(position="fill")+labs(x="항공사코드",y="proportion",title="delay by Carrier")+scale_fill_brewer(palette="Set2")+theme_minimal()
#날씨 별 연착비율
ggplot(records, aes(x=weather, fill=delay))+ geom_bar(position="fill")+labs(x="날씨",y="proportion",title="delay by Weather")+scale_fill_brewer(palette="Set2")+theme_minimal()
#날씨 별 연착비율
ggplot(records, aes(x=factor(weather,level=c(0,1),labels = c("Ok","Bad")), fill=delay))+ geom_bar(position="fill")+labs(x="날씨",y="proportion",title="delay by Weather")+scale_fill_brewer(palette="Set2")+theme_minimal()
str(records)
records = read.csv("./data/FlightRecords.csv")
records=records[records$deptime>600 & records$deptime < 2300, ]
records$deptime=as.factor(floor(records$deptime/100))
records$dayweek = as.factor(records$dayweek)
records$weather = as.factor(records$weather)
records$delay = factor(records$delay, level=c("ontime","delayed"), labels=c("ontime","delayed"))
str(records)
records[-c("schedtime")]
records[-c(1)]
records[-c(records$schedtime)]
records[-c(records$schedtime)]
records[,-c(records$schedtime)]
str(records)
str(records[-c(1,5,6,7,10,11)])
str(records[-c(1,5,6,7,11)])
str(records[-c(1,5,6,7,11,12)])
records=records[-c(1,5,6,7,11,12)]
records = read.csv("./data/FlightRecords.csv")
records=records[records$deptime>600 & records$deptime < 2300, ]
records$deptime=as.factor(floor(records$deptime/100))
records$dayweek = as.factor(records$dayweek)
records$weather = as.factor(records$weather)
records$delay = factor(records$delay, level=c("ontime","delayed"), labels=c("ontime","delayed"))
records=records[-c(1,5,6,7,11,12)]
#요일별 연착비율
ggplot(records, aes(x=factor(dayweek,levels=c(1,2,3,4,5,6,7),labels=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")), fill=delay))+ geom_bar(position="fill")+labs(x="Dayweek",y="proportion",title="delay by Dayweek")+scale_fill_brewer(palette="Set2")+theme_minimal()
#출발 시간대 별 연착 비율
ggplot(records, aes(x=factor(deptime,levels=c(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22),labels=c("6시","7시","8시","9시","10시","11시","12시","13시","14시","15시","16시","17시","18시","19시","20시","21시","22시")), fill=delay))+ geom_bar(position="fill")+labs(x="Deptime",y="proportion",title="delay by Deptime")+scale_fill_brewer(palette="Set2")+theme_minimal()
#출발 공항 별 연착비율
ggplot(records, aes(x=origin, fill=delay))+ geom_bar(position="fill")+labs(x="출발공항코드",y="proportion",title="delay by Origin")+scale_fill_brewer(palette="Set2")+theme_minimal()
#도착 공항 별 연착비율
ggplot(records, aes(x=dest, fill=delay))+ geom_bar(position="fill")+labs(x="도착공항코드",y="proportion",title="delay by Dest")+scale_fill_brewer(palette="Set2")+theme_minimal()
#항공사 별 연착비율
ggplot(records, aes(x=carrier, fill=delay))+ geom_bar(position="fill")+labs(x="항공사코드",y="proportion",title="delay by Carrier")+scale_fill_brewer(palette="Set2")+theme_minimal()
#날씨 별 연착비율
ggplot(records, aes(x=factor(weather,level=c(0,1),labels = c("Ok","Bad")), fill=delay))+ geom_bar(position="fill")+labs(x="날씨",y="proportion",title="delay by Weather")+scale_fill_brewer(palette="Set2")+theme_minimal()
library(psych)
pairs.panels(records)
set.seed(123)
split = initial_split
library(caret)
split = initial_split
?initial_split
??initial_split
library(rsample)
split = initial_split(records, prop=0.7, strat="delay")
train = training(split)
test=testing(split)
table(train$delay)
table(test$delay)
str(records)
pred_base = factor(records$weather, levels=c(0,1), labels=c("ontime","delayed"))
pred_base = factor(test$weather, levels=c(0,1), labels=c("ontime","delayed"))
confusionMatrix(pred_base, test$weather, positive="ontime")
confusionMatrix(pred_base, test$delay, positive="ontime")
model = glm(delay~., data=train, family="binomial")
summary(model)
records = read.csv("./data/FlightRecords.csv")
records=records[records$deptime>600 & records$deptime < 2300, ]
records$dayweek = as.factor(records$dayweek)
records$weather = as.factor(records$weather)
records$delay = factor(records$delay, level=c("ontime","delayed"), labels=c("ontime","delayed"))
records=records[-c(1,5,6,7,11,12)]
set.seed(123)
split = initial_split(records, prop=0.7, strat="delay")
train = training(split)
test = testing(split)
pred_base = factor(test$weather, levels=c(0,1), labels=c("ontime","delayed"))
confusionMatrix(pred_base, test$delay, positive="ontime")
model = glm(delay~., data=train, family="binomial")
summary(model)
summary(model)
str(train)
records = read.csv("./data/FlightRecords.csv")
records=records[records$deptime>600 & records$deptime < 2300, ]
records$deptime=as.factor(floor(records$deptime/100))
str(records)
records$dayweek = as.factor(records$dayweek)
records$weather = as.factor(records$weather)
records$delay = factor(records$delay, level=c("ontime","delayed"), labels=c("ontime","delayed"))
records=records[-c(1,5,6,7,11,12)]
set.seed(123)
split = initial_split(records, prop=0.7, strat="delay")
train = training(split)
test = testing(split)
pred_base = factor(test$weather, levels=c(0,1), labels=c("ontime","delayed"))
confusionMatrix(pred_base, test$delay, positive="ontime")
model = glm(delay~., data=train, family="binomial")
summary(model)
records
str(records)
prob = predict(model, type="response")
prob
str(prob)
str(train)
train[train$weather==0]
train[train$weather==0,]
train[train$weather==0 & train$deptime == 15 & train$origin == "IAD" & train$dest == "JFK" & train$carrier=="DL",]
train[train$weather==0 & train$deptime == 15 ,]
train[train$weather==0 & train$deptime == 15 & train$origin == "IAD",]
train[train$weather==0 & train$deptime == 15 & train$origin == "IAD" & train$dest == "JFK",]
test[test$weather==0 & test$deptime == 15 & test$origin == "IAD" & test$dest == "JFK" & test$carrier=="DL",]
records[records$weather==0 & records$deptime == 15 & records$origin == "IAD" & records$dest == "JFK" & records$carrier=="DL",]
records = read.csv("./data/FlightRecords.csv")
records[records$weather==0 & records$deptime == 15 & records$origin == "IAD" & records$dest == "JFK" & records$carrier=="DL",]
records[records$carrier=="DL",]
records = read.csv("./data/FlightRecords.csv")
records=records[records$deptime>600 & records$deptime < 2300, ]
records$deptime=as.factor(floor(records$deptime/100))
records$dayweek = as.factor(records$dayweek)
records$weather = as.factor(records$weather)
records$delay = factor(records$delay, level=c("ontime","delayed"), labels=c("ontime","delayed"))
records=records[-c(1,5,6,7,11,12)]
records[records$carrier=="DL",]
records[records$weather==0 & records$deptime == 15 & records$origin == "IAD" & records$dest == "JFK" & records$carrier=="DL",]
str(test)
test
test.head()
test.head
test_A = test[1]
test_A
test_A = test[1,]
test_A
test_A[6,]
test_A[1,]
test_A[1,]=c("DL", 15, "JFK","IAD",0,5,"delayed")
test_A
predict(model, test_A, type="response")
test_A = test[1,]
test_A[1,]=c("DL", 15, "JFK","IAD",0,5,"delayed")
predict(model, test_A, type="response")
test_prob = predict(model, test, type="response")
test_prob
str(test)
str(train)
str(records)
test_pred = rep("ontime",651)
test_pred[test_prob > 0.2] = "delayed"
confusionMatrix(factor(test_pred, levels=c("ontime","delayed")), test$delay, positive="delayed")
confusionMatrix(factor(test_pred, levels=c("ontime","delayed")), test$delay, positive="ontime")
confusionMatrix(factor(test_pred, levels=c("ontime","delayed")), test$delay, positive="delayed")
test_prob = predict(model, test, type="response")
test_pred = rep("ontime",651)
test_pred[test_prob > 0.2] = "delayed"
confusionMatrix(factor(test_pred, levels=c("ontime","delayed")), test$delay, positive="delayed")
test_pred = rep("ontime",651)
test_pred[test_prob > 0.3] = "delayed"
confusionMatrix(factor(test_pred, levels=c("ontime","delayed")), test$delay, positive="delayed")
test_pred = rep("ontime",651)
test_pred[test_prob > 0.5] = "delayed"
confusionMatrix(factor(test_pred, levels=c("ontime","delayed")), test$delay, positive="delayed")
test_pred = rep("ontime",651)
test_pred[test_prob > 0.7] = "delayed"
confusionMatrix(factor(test_pred, levels=c("ontime","delayed")), test$delay, positive="delayed")
model_step = step(model, direction="backward")
coef(model_step)
prob_step = predict(model_step, test, type="response")
pred_step = rep("ontime",651)
pred_step[prob_step>0.5] = "delayed"
confusionMatrix(factor(pred_step),test$delay, positive = "delayed
confusionMatrix(factor(pred_step),test$delay, positive = "delayed")
confusionMatrix(factor(pred_step),test$delay, positive = "delayed")
library(glmnet)
trainx = model.matrix(delay~., data=train)
trainy = train$delay
trainx
str(trainx)
str(trainy)
cv_lasso = cv.glmnet(x=trainx, y = trainy, alpha=1, family="binomial",type.measure = "auc", nfolds = 10)
plot(cv_lasso)
cv_lasso$vcm
cv_lasso$cvm
cv_lasso$lambda
cv_lasso$nzero
lambda <- cv_lasso$lambda[19]
coef(cv_lasso, s = lambda)
lambda <- cv_lasso$lambda[18]
coef(cv_lasso, s = lambda)
lambda <- cv_lasso$lambda[19]
coef(cv_lasso, s = lambda)
pred_prob = predict(cv_lasso, newx=mode.matrix(delay~.,data=test), s= lambda, type="response")
pred_prob = predict(cv_lasso, newx=model.matrix(delay~.,data=test), s= lambda, type="response")
pred_class = predict(cv_lasso, newx=model.matrix(delay~.,data=test), s= lambda, type="class")
confusionMatrix(factor(pred_class, levels=c("ontime","delayed")),test$delay,positive="delayed")
test_prob = predict(model, test, type="response")
prob_step = predict(model_step, test, type="response")
pred_prob = predict(cv_lasso, newx=model.matrix(delay~.,data=test), s= lambda, type="response")
test_prob
prob_step
str(test_prob)
str(prob_step)
str(pred_prob)
library(ROCR)
pred1 = prediction(test_prob, test$delay, c("ontime","delayed"))
perf1 = performance(pred1, measure="tpr",x.measure = "fpr")
pred2 = prediction(prob_step, test$delay, c("ontime","delayed"))
perf2 = performance(pred2, measure = "tpr", x.measure = "fpr")
pred3 = prediction(pred_prob, test$delay, c("ontime","delayed"))
perf2 = performance(pred3, measure = "tpr", x.measure = "fpr")
plot(perf, col="darkred", lwd=3)
plot(perf1, col="darkred", lwd=3)
plot(perf1, col="darkred", lwd=3)
plot(perf2, col="darkblue", lwd=3, add=TRUE)
plot(perf3, col="darkgreen", lwd=3, add=TRUE)
pred1 = prediction(test_prob, test$delay, c("ontime","delayed"))
perf1 = performance(pred1, measure="tpr",x.measure = "fpr")
pred2 = prediction(prob_step, test$delay, c("ontime","delayed"))
perf2 = performance(pred2, measure = "tpr", x.measure = "fpr")
pred3 = prediction(pred_prob, test$delay, c("ontime","delayed"))
perf3= performance(pred3, measure = "tpr", x.measure = "fpr")
plot(perf1, col="darkred", lwd=3)
plot(perf2, col="darkblue", lwd=3, add=TRUE)
plot(perf1, col="darkred", lwd=3)
plot(perf2, col="darkblue", lwd=3, add=TRUE)
plot(perf3, col="darkgreen", lwd=3, add=TRUE)
