str(x)
boxplot(x, main='boxplot', col='cyan')
boxplot(x, main='boxplot', col='cyan', boxwex=0.4, col=7)
boxplot(x, main='boxplot',  boxwex=0.4, col=7)
points(x, req(1, 100))
points(x, rep(1, 100))
points(x, rep(0.5, 100))
points(x, rep(0.5, 10))
points(x, rep(0.1, 100))
points(x, rep(2, 100))
grid(col=3)
points(x, rep(1:10, each=10), pch=19, cex=0.8, col=2)
boxplot(x, main='boxplot',  boxwex=0.4, col=7)
grid(col=3)
points(x, rep(1:10, each=10), pch=19, cex=0.8, col=2)
points(rep(1:10, each=10), x, pch=19, cex=0.8, col=2)
xstat=apply(x, 2, fivenum)
xstat
text(rep(1:10,each=5), xstat, labels=xstat, cex=0.8, col=4, pos=4)
corr.plot6()
ch2.man(4)
corr.plot6(m1=50,m2=65, s2=5, r=0.8, r2=0.9, n=100)
str(mtcars)
d=mtcars
plot(x=d$wt, y=d$mpg)
scat.lm(d$st, d$mpg)
scat.lm(d$wt, d$mpg)
library(Rstat)
scat.lm(d$wt, d$mpg)
with(d, scat.lm((wt,mpg))
with(d, scat.lm(wt,mpg))
pairs(d[c(1,2,4,6)])
plot(d[c(1,2,4,6)])
mf = ~mpg+cyl+hp+wt
pairs(mf, data=d)
mpg
myp = function(x,y) {points(x,y,pch=19,col=4)}
myp = function(x,y) {points(x,y,pch=19,col=4)
abline(lm(y~x), col=2) }
pairs(mf, data=d, main='s-p', panel=myp)
pairs(d[c(1,2,4,6)])
pairs(mf, data=d)
str(x)
data("exa2_3")
x=exa2_3
str(x)
x = as.matrix(x)
x
str(x)
location.est(x)
location.est(x, detail=T)
table(x)
max(table(x))
max(table(x))[0
]
max(table(x))
max(table(x))[6]
max(table(x))[0]
max(table(x)).print
max(table(x)).col
max(x)
max(table(x))
table(x)[0]
str(table(x))
table(x)[1]
table(x)[max(table(x))]
table(x)[max(table(x))[1]]
max(table(x))
max(table(x))[1]
max(table(x))[0]
max(table(x))$[1]
max(table(x))
as.numeric(max(table(x)))
table(x)[1]
max(table(x))
table(x)
str(table(x))
which(x>=6)
as.data.frame(table(x))
x1=as.data.frame(table(x))
x1[1]
x1[2]
x1[2] == 6
spread.ext(x, detail=T)
spread.est(x, detail=T)
x
x1=as.matrix(x)
spread.est(x1, detail=T)
sum(x^2)
fivenum(x)
summary*x
summary(x)
summary(x2)
quantile(x, p=0.25)
names(x)
x
class(x)
ls()
names(iris)
length(iris)
length(iris$Sepal.Length)
str(iris)
class(iris)
names(iris)
length(iris)
length(iris$Sepal.Width)
x=1:7; length(x)
x
names(x) = LETTERS[1:7]
names(x)
y=3:7
c(x,y)
cbind(x,y)
rbind(x,y)
x
x=1:10; y=
dfg
x=1:10; y=11:20; z=21:30
cbind(x,y,z)
c(x,y,z)
rbind(x,y,z)
ls()
rm(x,y)
1:10
seq(1:10, by=2)
seq(1,10,by=2)
seq(1,5.5,length=10)
seq(1,5.5,length=9)
rep(1:3, 4)
rep(1:3, each=4)
set.seed(1234)
x=rnorm(100)
x
t = cut(x, -5:5)
t
table(t)
plot(table(t))
x=c(5,1,34,4)
sort(x)
sort(x, decreasing = T)
order(x)
library(gplots)
library(animation)
library(rstat)
library(Rstat)
ami.potions(nmax=1000, interaval=0.01)
ani.potions(nmax=1000, interaval=0.01)
ani.options(nmax=1000, interaval=0.01)
win.grapg(7,4)
win.graph(7,4)
myf = function(n,mu) rbinom(n,size=1,prob=mu)
lln.ani(FUN=myf, mu=0.5, type="n")
rbinom(n=2, size=1, prob=0.5)
rbinom(n=5, size=1, prob=0.5)
S = tosscoin(4)
library(prob)
S = tosscoin(4)
S = S[order(S$toss1,S$toss2,S$toss3,S$toss4)]
S = S[order(S$toss1,S$toss2,S$toss3,S$toss4),]
counth =function(x) sum(x==="H")
counth =function(x) sum(X==="H")
counth =function(x) {sum(X==="H")}
counth =function(x) {sum(x==="H")}
counth=function(x) sum(x=="H")
counth=function(x) {sum(x=="H")}
S
A = subset(S, apply(S,counth)>=2)
A = subset(S, apply(S,1,counth)>=2)
element(A)
pprt(A,nrow(S))
myf = function(n,k){
S = tosscoin(n)
A = subset(S, apply(S,1,counth)>=k)
pprt(A,nrow(S))
}
myf(4,2)
for ( k in 1:10){ myf(2*k,k)}
S = rolldie(4)
S
S = rolldie(4)
A = subset(S, (X1+X2+X3+X4)>=15)
pprt(A,nrow(s))
pprt(A,nrow(S))
A = subset(S, apply(S,1, sum)>=15) ; pprt(A,nrow(S))
B = subset(S, apply(S,1, max)==6) ; pprt(B,nrow(S))
C = subset(S, apply(S,1, min)==1) ; pprt(C,nrow(S))
AB = intersect(AB);pprt(AB,nrow(S))
AB = intersect(A,B);pprt(AB,nrow(S))
AC = intersect(A,C);pprt(AC,nrow(S))
AV=rownames(A)
AV
A
AV=rownames(A)
BV=rownames(B)
CV=rownames(C)
venn(list(AV,BV,CV), showSet=T)
venn(list(AV,BV,CV), showSet=T)
x=matrix(1:15,3,5)
rownames(x) = letters[1:3]
colnames(x) = paste0("c",1:5)
x
x[,4]
x[4]
x[3,1]
x[4,]
x['c1']
x[c1]
x[,"c1"]
x[-c(1,3),]
x[c("a","c"),]
x[c("a","c"),2:5]
x[c("a","c"),c(2:5)]
c1=letters[1:20]
c2=1:20
c3=(1:20 %%3)==0
c3
df1 = data.frame(c1,c2,c3)
str)df1
str(df1)
names(df1) = c("요인","숫자","논리")
str(df1)
df1[1:5,]
df1['요인']
df1[,2]
df1['숫자']
[df1['숫자']]
df1[['숫자']]
mead(df1$숫자)
mean(df1$숫자)
mead(df1[[2]])
mean(df1[[2]])
ls()
> x=rnorm(100)
> t = cut(x, -5:5) : x를 –5부터5사이에 할당해라
> x=rnorm(100)
> t = cut(x, -5:5)
x=rnorm(100);t = cut(x, -5:5)
ls()
myl=list(c1,c2,c3,df1,t,x)
rm(c1,c2,c3,df1,t,x)
ls()
myl$x
myl[5]
myl[6]
myl[[6]]
myl[6]
x=data.frame(ID=1:4, Age=c(37,49,46,78),Class=c("A","B","B","A"))
y=data.frame(ID=4:1, Name=c("John","Tom","Mary","Candy"),BT=c("A","B","A","O"))
x
y
cbind(x,y)
merge(x,y,by="ID")
aggregate(x$Age,by=list(X$Class),FUN=mean)
x
aggregate(x$Age,by=list(x$Class),FUN=mean)
setwd(C:/Users/seook/Documents/21-1데이터분석및활용(R)/data)
setwd(C:/Users/seook/Documents/21-1데이터분석및활용(R)/data)
setwd(C:/Users/seook/Documents/21-1데이터분석및활용(R)/data)
getwd()
setwd("C:/Users/seook/Documents/21-1데이터분석및활용(R)/data")
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
Bank = read.csv('CommonBank.csv')
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
Bank
str(Bank)
g
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
#id와 zip.code삭제
Bank = subset(Bank, select=-c(ID, ZIP.Code))
#라벨링할 칼럼 삭제
Bank_n = subset(Bank, select=-c(PersonalLoan))
#z_normalize-1
z_normalize = function(x){
+ return ((x-mean(x))/sd(x))}
str(Bank_n)
bank_z=as.data.frame(lapply(Bank_n[1:11], z_normalize))
str(bank_x)
str(bank_z)
Bank_train = bank_z[1:4000,]
Bank_test = bank_z[4001:5000,]
str(Bank)
Bank_l = subset(Bank, select=c(PersonalLoan))
str(Bank_l)
Bank_train_labels = Bank_l[1:4000,]
Bank_test_labels = Bank_l[4001:5000,]
str(Bank_train)
str(Bank_train_labels)
ggplot(Bank_train_labels)+geom_bar()
# 사용할 패키지 추가
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggthemes)
ggplot(Bank_train_labels)+geom_bar()
Bank_train_labels = as.data.frame(Bank_l[1:4000,])
ggplot(Bank_train_labels)+geom_bar()
Bank_train_labels
str(Bank_train_labels)
ggplot(Bank_train_labels, aes(x=Bank_l[1:4000, ]))+geom_bar()
str(Bank)
Bank$PersonalLoan
Bank$PersonalLoan.count()
count(Bank$PersonalLoan)
count(Bank$PersonalLoan, 1)
ggplot(Bank_train_labels, aes(x=Bank_l[1:4000, ]))+geom_bar(stat="count")
Bank_train_labels
str(Bank_train_labels)
names(Bank_train_labels)=c('PersonalLoan')
str(Bank_train_labels)
ggplot(Bank_train_labels, aes(x=PersonalLoan))+geom_bar(stat="count")
ggplot(Bank_train_labels, aes(x=PersonalLoan))+geom_bar(stat="count")+geom_text(aes(lebel=n))
plotdata= count(Bank_train_labels, PersonalLoan)
plotdat
plotdata
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labels(x="가입/미가입 수", y="count", title="트레인데이터 상품가입현황(1:가입,0:미가입")
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labels(x="가입/미가입 수", y="count", title="트레인데이터 상품가입현황(1:가입,0:미가입)")
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="가입/미가입 수", y="count", title="트레인데이터 상품가입현황(1:가입,0:미가입)")
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="가입/미가입 수", y="count", title="트레인데이터 상품가입현황(1:가입,0:미가입)")+geom_text(aes(lebel=n))
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="가입/미가입 수", y="count", title="트레인데이터 상품가입현황(1:가입,0:미가입)")+geom_text(aes(label=n))
#라벨링 칼럼 생성
Bank_l = as.factor(subset(Bank, select=c(PersonalLoan)))
Bank_train_labels = as.data.frame(Bank_l[1:4000,])
#라벨링 칼럼 생성
Bank_l = as.factor(subset(Bank, select=c(PersonalLoan)))
str(Bank_l)
BBank_l
Bank_l
#라벨링 칼럼 생성
Bank_l = subset(Bank, select=c(PersonalLoan))
Bank_train_labels = as.data.frame(Bank_l[1:4000,])
str(Bank_train_labels)
names(Bank_train_labels) = c("PersonalLoan")
Bank_train_labels$PersonalLoan = as.factor(Bank_test_labels$PersonalLoan)
Bank_train_labels$PersonalLoan = factor(Bank_test_labels$PersonalLoan)
str(Bank_train_labels)
Bank_train_labels$PersonalLoan = factor(Bank_test_labels$PersonalLoan, levels=c(1,0), labels=c("가입","미가입"))
Bank$PersonalLoan = factor(Bank$PersonalLoan, levels=c(1,0), labels=c("가입","미가입"))
str(Bank)
Bank$PersonalLoan
#라벨링 칼럼 생성
Bank_l = subset(Bank, select=c(PersonalLoan))
Bank_train_labels = Bank_l[1:4000,]
str(Bank_train_labels)
names(Bank_test_labels=c("PersonalLoan"))
Bank_train_labels = as.data.frame(Bank_l[1:4000,])
str(Bank_train_labels)
names(Bank_test_labels=c("PersonalLoan"))
names(Bank_train_labels=c("PersonalLoan"))
names(Bank_train_labels)=c("PersonalLoan"))
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
#id와 zip.code삭제
Bank = subset(Bank, select=-c(ID, ZIP.Code))
Bank$PersonalLoan = factor(Bank$PersonalLoan, levels=c(1,0), labels=c("가입","미가입"))
#라벨링 칼럼 생성
Bank_l = subset(Bank, select=c(PersonalLoan))
Bank_train_labels = as.data.frame(Bank_l[1:4000,])
str(Bank_train_labels)
names(Bank_train_labels)=c("PersonalLoan")
str(Bank_train_labels)
plotdata = count(Bank_test_labels, PersonalLoan)
plotdata = count(Bank_train_labels, PersonalLoan)
plotdata
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labels(x="사품가입/미가입자수",y="count",title="train데이터 셋 상품 가입/미가입 현황")+geom_text(aes(x=n))
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labels(x="사품가입/미가입자수",y="count",title="train데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n))
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="사품가입/미가입자수",y="count",title="train데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n))
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="사품가입/미가입자수",y="count",title="train데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n),vjust=-0.5)
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
#id와 zip.code삭제
Bank = subset(Bank, select=-c(ID, ZIP.Code))
Bank$PersonalLoan = factor(Bank$PersonalLoan, levels=c(1,0), labels=c("가입","미가입"))
#라벨링할 칼럼 삭제
Bank_n = subset(Bank, select=-c(PersonalLoan))
#라벨링 칼럼 생성
Bank_l = subset(Bank, select=c(PersonalLoan))
#z_normalize-1
z_normalize = function(x){
+ return ((x-mean(x))/sd(x))}
#z_normalize를 적용하여 데이터프레이으로 변환
bank_z=as.data.frame(lapply(Bank_n[1:11], z_normalize))
#train, test dataset 분리
Bank_train = bank_z[1:4000,]
Bank_test = bank_z[4001:5000,]
Bank_train_labels = as.data.frame(Bank_l[1:4000,])
Bank_test_labels = as.data.frame(Bank_l[4001:5000,])
#training dataset target variable 분포
names(Bank_train_labels)=c("PersonalLoan")
plotdata = count(Bank_train_labels, PersonalLoan)
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="사품가입/미가입자수",y="count",title="train데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n),vjust=-0.5)
Bank_test_labels = as.data.frame(Bank_l[4001:5000,])
#test dataset target variable 분포
names(Bank_test_labels)=c("PersonalLoan")
plotdata = count(Bank_test_labels, PersonalLoan)
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="사품가입/미가입자수",y="count",title="test데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n),vjust=-0.5)
bank_z
str(bank_z)
str(Bank_train)
str(Bank_test)
str(Bank_train_labels)
str(Bank_test_labels)
str(wbcd)
table(Bank$PersonalLoan)
#training dataset target variable 분포
names(Bank_train_labels)=c("PersonalLoan")
plotdata = count(Bank_train_labels, PersonalLoan)
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="사품가입/미가입자수",y="count",title="train데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n),vjust=-0.5)
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
#id와 zip.code삭제
Bank = subset(Bank, select=-c(ID, ZIP.Code))
count(Bank$PersonalLoan)
table(Bank$PersonalLoan)
install.packages("class")
library(class)
Bank_test_pred = knn(train=Bank_train, test = Bank_test, cl=Bank_train_labels, k=5)
str(Bank_train)
str(Bank_train_labels)
Bank_test_pred = knn(train=Bank_train, test = Bank_test, cl=Bank_train_labels, k=5)
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
#id와 zip.code삭제
Bank = subset(Bank, select=-c(ID, ZIP.Code))
Bank$PersonalLoan = factor(Bank$PersonalLoan, levels=c(1,0), labels=c("가입","미가입"))
#라벨링할 칼럼 삭제
Bank_n = subset(Bank, select=-c(PersonalLoan))
#라벨링 칼럼 생성
Bank_l = subset(Bank, select=c(PersonalLoan))
#z_normalize-1
z_normalize = function(x){
+ return ((x-mean(x))/sd(x))}
#z_normalize-2// 두개의 방법 비교 결과 위에 함수식이 잘 동작한다는 것을 알 수 있음.
scale(Bank[1], center=TRUE, scale=TRUE)
#z_normalize를 적용하여 데이터프레이으로 변환
bank_z=as.data.frame(lapply(Bank_n[1:11], z_normalize))
#train, test dataset 분리
Bank_train = bank_z[1:4000,]
Bank_test = bank_z[4001:5000,]
Bank_train_labels = as.data.frame(Bank_l[1:4000,])
Bank_test_labels = as.data.frame(Bank_l[4001:5000,])
#training dataset target variable 분포
names(Bank_train_labels)=c("PersonalLoan")
plotdata = count(Bank_train_labels, PersonalLoan)
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="사품가입/미가입자수",y="count",title="train데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n),vjust=-0.5)
#test dataset target variable 분포
names(Bank_test_labels)=c("PersonalLoan")
plotdata = count(Bank_test_labels, PersonalLoan)
ggplot(plotdata, aes(x=PersonalLoan, y=n))+geom_bar(stat="identity")+labs(x="사품가입/미가입자수",y="count",title="test데이터 셋 상품 가입/미가입 현황")+geom_text(aes(label=n),vjust=-0.5)
Bank_test_pred = knn(train=Bank_train, test=Bank_test, cl=Bank_train_labels, k=5)
str(Bank_train)
str(Bank_test)
str(Bank_train_labels)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd <- wbcd[-1]
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("M", "B"),
labels = c("Malignant", "Benign"))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
str(wbcd_n)
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
str(wbcd_train)
str(wbcd_test)
str(wbcd_train_labels)
Bank = read.csv('CommonBank.csv', stringsAsFactors=FALSE)
#id와 zip.code삭제
Bank = subset(Bank, select=-c(ID, ZIP.Code))
Bank$PersonalLoan = factor(Bank$PersonalLoan, levels=c(1,0), labels=c("가입","미가입"))
#라벨링할 칼럼 삭제
Bank_n = subset(Bank, select=-c(PersonalLoan))
#라벨링 칼럼 생성
Bank_l = subset(Bank, select=c(PersonalLoan))
#z_normalize-1
z_normalize = function(x){
+ return ((x-mean(x))/sd(x))}
#z_normalize를 적용하여 데이터프레이으로 변환
bank_z=as.data.frame(lapply(Bank_n[1:11], z_normalize))
#train, test dataset 분리
Bank_train = bank_z[1:4000,]
Bank_test = bank_z[4001:5000,]
Bank_train_labels = (Bank_l[1:4000,]
Bank_train_labels = Bank_l[1:4000,]
str(Bank_train_labels)
wbcd_test_pred <- knn(train = Bank_train, test = Bank_test,
cl = Bank_train_labels, k = 5)
Bank_test_pred <- knn(train = Bank_train, test = Bank_test,
cl = Bank_train_labels, k = 5)
library(caret)
confusionMatrix(Bank_test_pred, Bank_test_labels)
Bank_test_labels =Bank_l[4001:5000,]
confusionMatrix(Bank_test_pred, Bank_test_labels)
Bank_train3 = bank_z[1:3200,]
Bank_test3 = bank_z[4001:5000,]
validation_set3 = bank_z[3201:4000,]
Bank_train_labels3 = Bank_l[1:3200,]
Bank_test_labels3 =Bank_l[4001:5000,]
validation_set_labels3 = Bank_l[3201:4000,]
str(Bank_train3)
str(validation_set3)
str(Bank_test3)
#validation set을 포함하여 데이터 re-split
Bank_train3 = bank_z[1:3200,]
Bank_test3 = bank_z[4001:5000,]
validation_set3 = bank_z[3201:4000,]
Bank_train_labels3 = Bank_l[1:3200,]
Bank_test_labels3 =Bank_l[4001:5000,]
validation_set_labels3 = Bank_l[3201:4000,]
Bank_test_pred3 <- knn(train = Bank_train3, test = validation_set3, cl = Bank_train_labels3, k = 5)
confusionMatrix(Bank_test_pred3, Bank_test_labels3)
confusionMatrix(Bank_test_pred3, validation_set_labels3)
